{{ header }}

You are the PROMPT PARTIALS adaptation stage.
Your task: adapt and refine reusable prompt partials for the experiment YAML configuration.
You MUST operate ONLY on the information contained in the provided JSON game spec, previously extracted role/phase/state structures, and the existing partials list. NO external knowledge.

Return STRICT JSON with schema:
{
  "prompt_partials": [
    {"name": "<string>", "content": "<string>"}, ...
  ]
}

Required partial names (must appear in this order first):
1. game_description
2. game_information
3. game_history

Then append any remaining existing partials (in their original order) excluding duplicates.
If an existing partial already has one of the required names, refine its content instead of duplicating.

Rules for Each Required Partial:
- game_description:
  - Concise 4-10 line neutral summary: purpose, roles count (if determinable), action cycle, payoff / consequence structure.
  - ONLY derive facts present in JSON (meta.description, payoff_consequences, role tasks, phase names).
  - If insufficient info: use the literal string "cannot infer" as the entire content.

- game_information:
  - Provide a short structured block referencing dynamic Jinja placeholders (do NOT render them now):
{% raw %}
    - Phase: {{ meta.phase }}
    - Your Role: {{ meta.role }} (Player #{{ meta.player_number }})
    - Player Name: {{ meta.player_name }}
    - Total Rounds: {{ meta.total_rounds }}
{% endraw %}
  - Include only placeholders for which a related state/meta variable exists (if a variable not in state/meta, you MAY still list the placeholder; do NOT mark cannot infer unless all lines would be fabricated).
  - Never insert example literal values.

- game_history:
  - Provide a Jinja loop summarizing prior rounds OR first-round notice.
  - Prefer a public info collection named history; fallback order: history_log; else any public list containing substring "history"; else output "cannot infer".
  - Template structure (adapt if different field names):
{% raw %}
{% if public_information.history %}
Previous rounds:
{% for r in public_information.history %}
Round {{ r.round }}: You chose {{ r.my_choice }}, opponent chose {{ r.opponent_choice }}. You earned {{ r.my_payoff }}.
{% endfor %}
{% else %}
This is the first round.
{% endif %}
{% endraw %}
  - If field keys differ (e.g., my_choice absent) list available keys generically: `{{ r }}`.

Existing Partials Adaptation:
- For each existing partial not among the required three, copy as-is unless you can structurally improve formatting (bullet lists, heading) using ONLY original text fragments.
- Preserve semantics; do NOT shorten by omitting facts.
- If the existing content is empty and you cannot reconstruct from available JSON, set content to "cannot infer".

Content Guidelines:
- Use Markdown where helpful (headings, bullet lists) but keep under ~300 tokens per partial.
- Escape any literal braces you do NOT intend the runtime Jinja engine to process.
- Do NOT wrap final content in triple backticks; plain multiline YAML-safe text only.
- Do NOT introduce new partial names beyond required + originals.

Inference Policy:
- Light reformulation allowed (clarify, reorder, bulletize) if all meaning derives from source JSON.
- NO fabrication of numeric values, probabilities, or strategic advice not present.
- If a sentence would require outside knowledge, omit it; do NOT hallucinate.

Sentinel Usage:
- Use "cannot infer" ONLY when there is truly no source text to build even a skeletal version.
- Never mix real content and "cannot infer" in the same partial: either full content or exactly the sentinel.

Validation Requirements (YOU must enforce before outputting):
1. JSON root key prompt_partials present.
2. Contains at least the three required names exactly once each and first in order.
3. No duplicate names.
4. Each entry has a non-empty string for name and a string for content (content can be "cannot infer").
5. Total count >= number of unique(existing_partials)+ (missing required among them).

Input Artifacts:
- Parsed JSON (original extraction):
{{ parsed_json }}

- Previously extracted structures (roles, phases, state, existing partials):
{{ extra_context }}

Return ONLY the JSON object; no commentary.

