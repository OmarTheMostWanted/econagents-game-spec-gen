name: "futarchy"

prompt_partials:
  - name: "game_information"
    content: |
      1. **Game Information**:
         - Phase: {{ meta.phase }}
         - Your Role: {{ meta.role }} (Player #{{ meta.player_number }})
         - Name: {{ meta.player_name }}

  - name: "system_phase_6"
    content: |
      You are simulating a participant in an economic experiment focused on land development and tax share trading.
      Your goal is to maximize profits through strategic actions. You can gain money by trading of tax shares, where each share's value depends on the total tax revenue collected.
      Or by influencing the development plans in your benefit.

      Key considerations about tax shares:
      - Each share pays (Total Tax Revenue / 100) as dividends
      - You have access to both public and private signals about share values
      - You can post asks (sell offers) or bids (buy offers) for single shares

      Key considerations about development plans:
      - The development option, project or no project, is chosen based on the final price in the tax share markets
      - You can influence the development plans by trading tax shares in both markets
      - All players with the role owner loose value if the project is developed
      - the player with the role developer gains value if the project is developed

  - name: "user_phase_6"
    content: |
      Instructions for this phase:

      1. **Game Information**:
         - Phase: Phase {{ meta.phase }}
         - Your Role: {{ meta.role }} (Player #{{ meta.player_number }})
         - Name: {{ meta.player_name }}
         - Your Wallet:
           - Tax Shares conditional on project development: {{ private_information.wallet[0].shares }}
           - Balance of cash conditional on project development: {{ private_information.wallet[0].balance }}
           - Tax Shares conditional on no project development: {{ private_information.wallet[1].shares }}
           - Balance of cash conditional on no project development: {{ private_information.wallet[1].balance }}

      2. **Market Information**:
         - Received public value signal (of tax shares) conditional on project development: {{ public_information.public_signal[0] }}
         - Received private value signal (of tax shares) conditional on project development: {{ private_information.value_signals[0] }}
         - Received public value signal (of tax shares) conditional on no project development: {{ public_information.public_signal[1] }}
         - Received private value signal (of tax shares) conditional on no project development: {{ private_information.value_signals[1] }}
         - Orders: {{ public_information.market_state.order_book }}


      3. **Your Decision Options**:
         Provide the output (one of these options) as a JSON object:
         A. Post a new order:
         {
             "gameId": {{ meta.game_id }},
             "type": "post-order",
             "order": {
                 "price": <number>, # if now=true, put 0 (will be ignored)
                 "quantity": 1,
                 "type": <"ask" or "bid">,
                 "now": <true or false>,
                 "condition": <0 or 1>
             },
         }

         B. Cancel an existing order:
         {
             "gameId": {{ meta.game_id }},
             "type": "cancel-order",
             "order": {
                 "id": <order_id>,
                 "condition": <0 or 1>
             },
         }

         C. Do nothing:
         {}

      Remember:
      - You can only trade one share at a time
      - You have limited time to trade
      - Setting "now": true will execute at the best available price
      - Orders can be canceled before they are fulfilled
      - setting the condition to 0 means that the order is for no project development
      - setting the condition to 1 means that the order is for project development

agent_roles:
  - role_id: 1
    name: "speculator"
    llm_type: "ChatOpenAI"
    llm_params:
      model_name: "gpt-4o"
    task_phases: [3, 6, 8]
    prompts:
      - system: |
          You are simulating a participant called "a Speculator" in a multi-round economic experiment about land development, taxation, speculation, and trading tax shares.

          Your role:
          - You do not own any land initially.
          - You can buy plots of land (during Speculation phases) at the declared prices if you think they are undervalued.
          - you earn value if you buy a plot of land at a price lower than its true value
          - You get a number of tax shares initially, and each share pays dividends = (Total Tax Revenue / 100).
          - You can buy and sell tax shares (during Market phases) by placing bids and asks.

      - user_phase_3: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Declarations**:
                {% for declaration in private_information.declarations %}
                {% set role_name = "Speculator" if declaration["role"] == 1 else "Developer" if declaration["role"] == 2 else "Owner" %}
                {% set declared_value_no_project = declaration["d"][0] %}
                {% set declared_value_project = declaration["d"][1] %}

                {% if declaration["role"] == 2 %}
                  {% set min_value_no_project = public_information.boundaries["developer"]["noProject"]["low"] %}
                  {% set max_value_no_project = public_information.boundaries["developer"]["noProject"]["high"] %}
                  {% set min_value_project = public_information.boundaries["developer"]["projectA"]["low"] %}
                  {% set max_value_project = public_information.boundaries["developer"]["projectA"]["high"] %}
                  {% set percentile_no_project = ((declared_value_no_project - min_value_no_project) / (max_value_no_project - min_value_no_project) * 100) | round(2) %}
                  {% set percentile_project = ((declared_value_project - min_value_project) / (max_value_project - min_value_project) * 100) | round(2) %}
                  - Player #{{ declaration["number"] }} ({{ role_name }}), declared value: {{ declared_value_no_project }} (no project), {{ declared_value_project }} (project), percentile: {{ percentile_no_project }}% (no project), {{ percentile_project }}% (project)
                {% else %}
                  - Player #{{ declaration["number"] }} ({{ role_name }}), declared value: {{ declared_value_no_project }} (no project), {{ declared_value_project }} (project)
                {% endif %}
                {% endfor %}


            2.2. **Real Value Boundaries**:
              {% for role, conditions in public_information.boundaries.items() %}
              - {{ role }}:
                {% for condition, bounds in conditions.items() %}
                - {{ condition }}: {{ bounds.low }} to {{ bounds.high }}
                {% endfor %}
              {% endfor %}

          3. **Your Decision to Make**:
             - Decide which properties to purchase based on their declared values and your assessment of true value
             - You can purchase the properties of multiple players under the same condition or different conditions, choose not to buy a property, or purchase the same property under both conditions.
             - You should make a list of the id of the players whose property you want to purchase under the condition noProject: [<player_id>,<player_id>].
             - You should make a list of the id of the players whose property you want to purchase under the condition projectA: [<player_id>,<player_id>, <player_id>].
             - You should combine these two lists in a list of lists: [[<player_id>, <player_id>], [<player_id>, <player_id>, <player_id>]] and place this list of lists in the snipe field.

             - Provide the output as a JSON object:
              {
                "gameId": {{ meta.game_id }},
                "type": "done-speculating",
                "snipe": [[<player_id>, <player_id>], [<player_id>, <player_id>, <player_id>]],
              }

              Example:
              If you want to purchase the properties of player 1, 2 and 4 under the condition noProject and purchache the property of player 2 under the condition projectA, you would provide the following JSON object:
              {
                "gameId": 1,
                "type": "done-speculating",
                "snipe": [[1, 2, 4], [2]],
              }

      - system_phase_6: |
          {% include "_partials/system_phase_6.jinja2" %}

      - user_phase_6: |
          {% include "_partials/user_phase_6.jinja2" %}

      - user_phase_8: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Declarations**:
              - Winning Condition: {{ public_information.winning_condition_description }} ({{ public_information.winning_condition }})
              {% set key = "projectA" if public_information.winning_condition == 1 else "noProject" %}
              {% for declaration in private_information.declarations %}
                {% set role_name = "Speculator" if declaration["role"] == 1 else "Developer" if declaration["role"] == 2 else "Owner" %}
                {% set declared_value = declaration["d"][public_information.winning_condition] %}
                {% if declaration["role"] == 2 %}
                  {% set min_value = public_information.boundaries["developer"][key]["low"] %}
                  {% set max_value = public_information.boundaries["developer"][key]["high"] %}
                {% else %}
                  {% set min_value = public_information.boundaries["owner"][key]["low"] %}
                  {% set max_value = public_information.boundaries["owner"][key]["high"] %}
                {% endif %}
                {% set percentile = ((declared_value - min_value) / (max_value - min_value) * 100) | round(2) %}
                - Player #{{ declaration["number"] }} ({{ role_name }}), declared value: {{ declared_value }}, percentile: {{ percentile }}%
              {% endfor %}

            2.2. **Real Value Boundaries**:
              {% for role, conditions in public_information.boundaries.items() %}
              - {{ role }}:
                {% for condition, bounds in conditions.items() %}
                - {{ condition }}: {{ bounds.low }} to {{ bounds.high }}
                {% endfor %}
              {% endfor %}

          3. **Your Decision to Make**:
             - Decide which properties to purchase based on their declared values and your assessment of true value
             - You can purchase the properties of multiple players under the same condition or different conditions, choose not to buy a property, or purchase the same property under both conditions.
             - You should make a list of the id of the players whose property you want to purchase under the condition noProject: [<player_id>,<player_id>].
             - You should make a list of the id of the players whose property you want to purchase under the condition projectA: [<player_id>,<player_id>, <player_id>].
             - You should combine these two lists in a list of lists: [[<player_id>, <player_id>], [<player_id>, <player_id>, <player_id>]] and place this list of lists in the snipe field.

             - Provide the output as a JSON object:
              {
                "gameId": {{ meta.game_id }},
                "type": "done-speculating",
                "snipe": [[<player_id>, <player_id>], [<player_id>, <player_id>, <player_id>]],
              }

              Example:
              If you want to purchase the properties of player 1, 2 and 4 under the condition noProject and purchache the property of player 2 under the condition projectA, you would provide the following JSON object:
              {
                "gameId": 1,
                "type": "done-speculating",
                "snipe": [[1, 2, 4], [2]],
              }

  - role_id: 2
    name: "developer"
    llm_type: "ChatOpenAI"
    llm_params:
      model_name: "gpt-4o"
    task_phases: [2, 6, 7]
    prompts:
      - system: |
          You are simulating a participant called "the Developer" in a multi-round economic experiment about land development, taxation, and trading tax shares.

          Your role:
          - You own the plot of land where the Project may be built
          - You must declare your land's value under two scenarios:
            1. "No Project": If the project is not developed
            2. "Project": If the project is developed
          - You pay taxes on your declared value:
            - 1% tax on initial declaration
            - 33% tax on final declaration
          - You start with 30 tax shares (each share pays dividends = Total Tax Revenue / 100)
          - You can buy/sell tax shares during Market phases
          - You can only trade one share at a time
          - you gain value if the project is developed
          - the project is developed if the price in the market with development is higher than the price in the market without development at the end of market phase 6

      - user_phase_2: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Your True Land Values**:
              - {{ private_information.property.name }}:
                - No Project: {{ private_information.property.v[0] }}
                - Project: {{ private_information.property.v[1] }}

            2.2. **Value Boundaries**:
              {% for role, conditions in public_information.boundaries.items() %}
              - {{ role }}:
                {% for condition, bounds in conditions.items() %}
                - {{ condition }}: {{ bounds.low }} to {{ bounds.high }}
                {% endfor %}
              {% endfor %}

            2.3. **Tax Information**:
              - Current tax rate: {{ public_information.tax_rate }}%

          3. **Your Decision to Make**:
             - Declare your land value for both scenarios (Project and No Project)
             - Your declaration will affect which scenario is chosen
             - Provide the output as a JSON object:

              {
                  "gameId": {{ meta.game_id }},
                  "type": "declare",
                  "declaration": [
                      <value_no_project>,
                      <value_project>,
                      0,
                  ],
              }

      - system_phase_6: |
          {% include "_partials/system_phase_6.jinja2" %}

      - user_phase_6: |
          {% include "_partials/user_phase_6.jinja2" %}

      - user_phase_7: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Your True Land Values**:
              - {{ private_information.property.name }}:
                - No Project: {{ private_information.property.v[0] }}
                - Project: {{ private_information.property.v[1] }}

            2.2. **Winning Condition**:
              - {{ public_information.winning_condition_description }} ({{ public_information.winning_condition }})

            2.3. **Your Initial Declaration**:
              - Declared Value: {{ private_information.declarations[meta.player_number-1].declared_value }}
              - Percentile: {{ private_information.declarations[meta.player_number-1].percentile }}%

            2.4. **Tax Information**:
              - Current tax rate: {{ public_information.tax_rate }}%

            2.4. **Market Signals**:
              - Public Signal: {{ public_information.public_signal[public_information.winning_condition] }}
              - Your Private Signal: {{ private_information.value_signals[public_information.winning_condition] }}

          3. **Your Decision to Make**:
             - Make your final declaration for the winning scenario
             - Provide the output as a JSON object:
              {
                "gameId": {{ meta.game_id }},
                "type": "declare",
                "declaration": [
                    <value_no_project>,
                    <value_project>,
                    0,
                ],
              }

  - role_id: 3
    name: "owner"
    llm_type: "ChatOpenAI"
    llm_params:
      model_name: "gpt-4o"
    task_phases: [2, 6, 7]
    prompts:
      - system: |
          You are simulating a participant called "an Owner" in a multi-round economic experiment about land development, taxation, and trading tax shares.

          Your role:
          - You own one of the 5 plots of land that may be affected by the Project
          - You must declare your land's value under two scenarios:
            1. "No Project": If the project is not developed
            2. "Project": If the project is developed (which may negatively impact your land value)
          - You pay taxes on your declared value:
            - 1% tax on initial declaration
            - 33% tax on final declaration
          - You start with 6 tax shares (each share pays dividends = Total Tax Revenue / 100)
          - You can buy/sell tax shares during Market phases
          - You can only trade one share at a time
          - you gain value if the project is not developed
          - the project is not developed if the price in the market with development is lower than the price in the market without development at the end of market phase 6

      - user_phase_2: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Your True Land Values**:
              - {{ private_information.property.name }}:
                - No Project: {{ private_information.property.v[0] }}
                - Project: {{ private_information.property.v[1] }}

            2.2. **Value Boundaries**:
              {% for role, conditions in public_information.boundaries.items() %}
              - {{ role }}:
                {% for condition, bounds in conditions.items() %}
                - {{ condition }}: {{ bounds.low }} to {{ bounds.high }}
                {% endfor %}
              {% endfor %}

            2.3. **Tax Information**:
              - Current tax rate: {{ public_information.tax_rate }}%

          3. **Your Decision to Make**:
             - Declare your land value for both scenarios (Project and No Project)
             - Your declaration will affect which scenario is chosen
             - Provide the output as a JSON object:
              {
                "gameId": {{ meta.game_id }},
                "type": "declare",
                "declaration": [
                    <value_no_project>,
                    <value_project>,
                    0,
                ],
              }

      - system_phase_6: |
          {% include "_partials/system_phase_6.jinja2" %}

      - user_phase_6: |
          {% include "_partials/user_phase_6.jinja2" %}

      - user_phase_7: |
          Instructions for this phase:

          {% include "_partials/game_information.jinja2" %}

          2. **Available Information**:
            2.1. **Your True Land Values**:
              - {{ private_information.property.name }}:
                - No Project: {{ private_information.property.v[0] }}
                - Project: {{ private_information.property.v[1] }}

            2.2. **Winning Condition**:
              - {{ public_information.winning_condition_description }} ({{ public_information.winning_condition }})

            2.3. **Your Initial Declaration**:
              - Declared Value: {{ private_information.declarations[meta.player_number-1].declared_value }}
              - Percentile: {{ private_information.declarations[meta.player_number-1].percentile }}%

            2.4. **Tax Information**:
              - Current tax rate: {{ public_information.tax_rate }}%

            2.5. **Market Signals**:
              - Public Signal: {{ public_information.public_signal[public_information.winning_condition] }}
              - Your Private Signal: {{ private_information.value_signals[public_information.winning_condition] }}

          3. **Your Decision to Make**:
             - Make your final declaration for the winning scenario
             - Provide the output as a JSON object:
              {
                "gameId": {{ meta.game_id }},
                "type": "declare",
                "declaration": [
                    <value_no_project>,
                    <value_project>,
                    0,
                ],
              }

agents:
  - id: 1
    role_id: 1
  - id: 2
    role_id: 2
  - id: 3
    role_id: 3
  - id: 4
    role_id: 3
  - id: 5
    role_id: 3
  - id: 6
    role_id: 3

state:
  meta_information:
    - name: "game_id"
      type: "int"
      default: 0
      exclude_from_mapping: true
    - name: "player_name"
      type: "str"
      event_key: "name"
      optional: true
    - name: "player_number"
      type: "int"
      event_key: "number"
      optional: true
    - name: "players"
      type: "list"
      default_factory: "list"
    - name: "phase"
      type: "int"
      default: 0
    - name: "role"
      type: "str"
      exclude_from_mapping: true
      optional: true
  private_information:
    - name: "wallet"
      type: "list"
      default_factory: "list"
    - name: "value_signals"
      type: "list"
      default_factory: "list"
      event_key: "signals"
    - name: "declarations"
      type: "list"
      default_factory: "list"
    - name: "property"
      type: "dict"
      default_factory: "dict"
  public_information:
    - name: "tax_rate"
      type: "float"
      default: 0
      event_key: "taxRate"
    - name: "initial_tax_rate"
      type: "float"
      default: 0
      event_key: "initialTaxRate"
    - name: "final_tax_rate"
      type: "float"
      default: 0
      event_key: "finalTaxRate"
    - name: "boundaries"
      type: "dict"
      default_factory: "dict"
    - name: "conditions"
      type: "list"
      default_factory: "list"
    - name: "public_signal"
      type: "list"
      default_factory: "list"
      event_key: "publicSignal"
    - name: "winning_condition"
      type: "int"
      default: 0
    - name: "market_state"
      type: "MarketState"
      default_factory: "MarketState"

manager:
  type: "HybridPhaseManager"

runner:
  game_id: 0
  type: "HybridGameRunner"
  continuous_phases: [6]
  max_action_delay: 10
  min_action_delay: 5
  hostname: "188.166.34.67"
  port: 3088
  path: "ws"
  log_level: "DEBUG"
  observability_provider: "langsmith"
